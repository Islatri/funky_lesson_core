name: Release

# 仅在推送版本标签时触发，节约资源
on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 创建GitHub Release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## 🚀 Funky Lesson Core ${{ steps.get_version.outputs.version }}
            
            ### 📦 下载说明
            - **Windows**: `funky_lesson_core-windows.exe`
            - **macOS**: `funky_lesson_core-macos`
            - **Linux**: `funky_lesson_core-linux`
            
            ### 🔧 使用方法
            ```bash
            # Windows (PowerShell)
            ./funky_lesson_core-windows.exe <用户名> <密码> <选课轮次> [循环]
            
            # macOS/Linux
            ./funky_lesson_core-macos <用户名> <密码> <选课轮次> [循环]
            ./funky_lesson_core-linux <用户名> <密码> <选课轮次> [循环]
            ```
            
            ### ⚠️ 重要提醒
            - 请先在教务系统中将要选的课程添加到收藏列表
            - 验证码图片会保存为 `captcha.png`，请及时输入验证码
            - 本软件仅供学习研究使用，请遵守相关法律法规
          draft: false
          prerelease: false

  # 构建多平台可执行文件
  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: funky_lesson_core-linux
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: funky_lesson_core-windows.exe
            
          - os: macos-latest
            target: x86_64-apple-darwin
            name: funky_lesson_core-macos

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/funky_lesson_core ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\funky_lesson_core.exe ${{ matrix.name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  # 构建完成后的通知
  notify-completion:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 Release ${{ needs.create-release.outputs.version }} 构建完成!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 可执行文件已发布:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows x64: funky_lesson_core-windows.exe" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS x64: funky_lesson_core-macos" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Linux x64: funky_lesson_core-linux" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [查看发布页面](https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
